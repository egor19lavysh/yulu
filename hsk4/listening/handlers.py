from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, PollAnswer
from aiogram.utils.keyboard import InlineKeyboardBuilder
from hsk4.intro import Sections, get_back_to_types
from .service import service
from .states import ListeningThirdStates, ListeningSecondStates

router = Router()

### Callback –∑–Ω–∞—á–µ–Ω–∏—è
CALLBACK_LISTENING_VARIANT = "hsk4_listening_variant"

### –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
TEXT_CHOOSE_VARIANT = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
TEXT_PART_1 = "–ó–∞–¥–∞–Ω–∏–µ 1"
TEXT_PART_2 = "–ó–∞–¥–∞–Ω–∏–µ 2"
TEXT_PART_3 = "–ó–∞–¥–∞–Ω–∏–µ 3"
TEXT_ALL_PARTS_COMPLETED = "–í—Å–µ —á–∞—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ"
TEXT_NO_TASKS = "–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
TEXT_TASK_COMPLETED = "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!üéâ\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total}</b>"
TEXT_ALL_TASKS_COMPLETED = "–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total}</b>"

TEXT_TASK_1 = "–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç—Ä—ã–≤–∫–∏, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–∏–Ω–Ω—ã –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫ –Ω–∏–º –∏–ª–∏ –Ω–µ—Ç:"
TEXT_TASK_2 = "–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥–∏ –º–µ–∂–¥—É –¥–≤—É–º—è –ª—é–¥—å–º–∏, –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∫—Ç–æ—Ä–æ–º –≤–æ–ø—Ä–æ—Å:"
TEXT_TASK_3 = "–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –¥–∏–∞–ª–æ–≥–∏ –∏–ª–∏ –º–æ–Ω–æ–ª–æ–≥–∏ (4-5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π), –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 1-2 –≤–æ–ø—Ä–æ—Å–∞:"

TEXT_TRUE = "–ü—Ä–∞–≤–¥–∞"
TEXT_FALSE = "–õ–æ–∂—å"

ANSWER_RIGHT = "‚úÖ –í–µ—Ä–Ω–æ!"
ANSWER_FALSE = "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"


@router.callback_query(F.data == Sections.listening)
async def show_listening_variants(callback: CallbackQuery):
    variants = service.get_listening_variants()
    builder = InlineKeyboardBuilder()
    for num, variant in enumerate(variants, start=1):
        builder.add(
            InlineKeyboardButton(
                text=f"–í–∞—Ä–∏–∞–Ω—Ç {num}",
                callback_data=f"{CALLBACK_LISTENING_VARIANT}_{variant.id}"
            )
        )
    builder.adjust(1)
    await callback.message.answer(TEXT_CHOOSE_VARIANT, reply_markup=builder.as_markup())
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data.startswith(CALLBACK_LISTENING_VARIANT))
async def start_listening_variant(callback: CallbackQuery, state: FSMContext):
    var_id = int(callback.data.split("_")[-1])
    variant = service.get_listening_variant(variant_id=var_id)

    if not variant:
        await callback.message.answer("–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        variant_id=var_id,
        total_score=0
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    await callback.message.answer(TEXT_PART_1)
    await start_part_1(callback, state)
    await callback.answer()


async def start_part_1(callback: CallbackQuery, state: FSMContext):
    variant_id = int((await state.get_data())["variant_id"])
    if first_tasks := service.get_first_tasks_by_variant(variant_id=variant_id):
        await state.update_data(
            first_tasks=first_tasks,
            index=0,
            score=0
        )

        await callback.message.answer(text=TEXT_TASK_1)
        await handle_first_tasks(callback, state)

    else:
        await callback.message.answer(TEXT_NO_TASKS)
        await callback.answer()
        await callback.message.answer(TEXT_PART_2)
        await start_part_2(callback, state)


async def handle_first_tasks(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tasks = data["first_tasks"]
    index = data["index"]
    score = data["score"]
    total_score = data["total_score"]

    if index < len(tasks):
        current_task = tasks[index]

        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text=TEXT_TRUE,
                callback_data=f"hsk4_true_{index + 1}"
            ),
            InlineKeyboardButton(
                text=TEXT_FALSE,
                callback_data=f"hsk4_false_{index + 1}"
            )
        )
        await callback.message.answer(
            text=f"–í–æ–ø—Ä–æ—Å {index + 1}/{len(tasks)}\n{current_task.text}",
            reply_markup=builder.as_markup()
        )
    else:
        total_score += score

        await callback.message.answer(TEXT_TASK_COMPLETED.format(score=total_score, total=10))

        await state.update_data(
            total_score=total_score
        )

        await callback.message.answer(text=TEXT_PART_2)
        await start_part_2(callback, state)


@router.callback_query(F.data.startswith(("hsk4_true_", "hsk4_false_")))
async def handle_first_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    tasks = data["first_tasks"]
    index = data["index"]
    score = data["score"]

    bool_dict = {
        "true": True,
        "false": False
    }

    curr_task = tasks[index]
    answer = callback.data.split("_")[1]

    if bool_dict[answer] == curr_task.is_correct:
        score = score + 1
        await callback.message.edit_text(
            f"{callback.message.text}\n{ANSWER_RIGHT}"
        )
    else:
        await callback.message.edit_text(f"{callback.message.text}\n{ANSWER_FALSE}")

    new_index = index + 1

    await state.update_data(
        index=new_index,
        score=score
    )

    await handle_first_tasks(callback, state)


async def start_part_2(callback: CallbackQuery, state: FSMContext):
    variant_id = int((await state.get_data())["variant_id"])
    if second_tasks := service.get_second_tasks_by_variant(variant_id=variant_id):
        await state.update_data(
            second_tasks=second_tasks,
            index=0,
            score=0
        )

        await callback.message.answer(text=TEXT_TASK_2)
        await handle_second_tasks(callback, state)

    else:
        await callback.message.answer(TEXT_NO_TASKS)
        await callback.answer()
        await callback.message.answer(TEXT_PART_3)
        await start_part_3(callback, state)


async def handle_second_tasks(callback: CallbackQuery = None, state: FSMContext = None,
                              bot: Bot = None, chat_id: int = None):
    data = await state.get_data()
    tasks = data["second_tasks"]
    index = data["index"]
    score = data["score"]
    total_score = data["total_score"]

    if not bot:
        bot = callback.bot
        chat_id = callback.message.chat.id

    if index < len(tasks):
        task = tasks[index]
        options = [f"{option.letter}. {option.text}" for option in task.options]
        correct_answer_id = ord(task.correct_letter) - ord("A")
        await bot.send_poll(
            chat_id=chat_id,
            options=options,
            question=f"–í–æ–ø—Ä–æ—Å {index + 1}/{len(tasks)}",
            correct_option_id=correct_answer_id,
            is_anonymous=False,
            type="quiz"
        )
        await state.update_data(
            correct_answer_id=correct_answer_id,
            chat_id=chat_id
        )
        await state.set_state(ListeningSecondStates.poll_answer)
    else:
        print(total_score)
        total_score += score

        await bot.send_message(chat_id=chat_id, text=TEXT_TASK_COMPLETED.format(score=score, total=15))

        await state.update_data(
            total_score=total_score
        )

        await bot.send_message(chat_id=chat_id, text=TEXT_PART_3)
        await start_part_3(callback, state, bot, chat_id)


@router.poll_answer(ListeningSecondStates.poll_answer)
async def handle_second_answer(poll_answer: PollAnswer, state: FSMContext):
    data = await state.get_data()
    correct_answer_id = data["correct_answer_id"]
    score = data["score"]
    index = data["index"]
    chat_id = data["chat_id"]

    if poll_answer.option_ids:
        is_correct = correct_answer_id == poll_answer.option_ids[0]
        await state.update_data(
            score=score + (1 if is_correct else 0),
            index=index + 1
        )

    await handle_second_tasks(bot=poll_answer.bot, state=state, chat_id=chat_id)


async def start_part_3(callback: CallbackQuery = None, state: FSMContext = None,
                       bot: Bot = None, chat_id: int = None):
    if not bot:
        bot = callback.bot
        chat_id = callback.message.chat.id

    variant_id = int((await state.get_data())["variant_id"])
    if third_tasks := service.get_third_tasks_by_variant(variant_id=variant_id):
        await state.update_data(
            third_tasks=third_tasks,
            index=0,
            score=0
        )

        await bot.send_message(chat_id=chat_id, text=TEXT_TASK_3)
        await handle_third_tasks(bot, chat_id, state)

    else:
        await bot.send_message(chat_id=chat_id, text=TEXT_NO_TASKS)
        await bot.send_message(chat_id=chat_id, text=TEXT_PART_3)
        await finish_listening(bot, chat_id, state)


async def handle_third_tasks(bot: Bot, chat_id: int, state: FSMContext):
    data = await state.get_data()
    tasks = data["third_tasks"]
    index = data["index"]
    score = data["score"]
    total_score = data["total_score"]

    if index < len(tasks):
        task = tasks[index]
        options = [f"{option.letter}. {option.text}" for option in task.options]
        correct_answer_id = ord(task.correct_letter) - ord("A")
        await bot.send_poll(
            chat_id=chat_id,
            options=options,
            question=f"–í–æ–ø—Ä–æ—Å {index + 1}/{len(tasks)}",
            correct_option_id=correct_answer_id,
            is_anonymous=False,
            type="quiz"
        )
        await state.update_data(
            correct_answer_id=correct_answer_id,
            chat_id=chat_id
        )
        await state.set_state(ListeningThirdStates.poll_answer)
    else:
        print(total_score)
        total_score += score

        await bot.send_message(chat_id=chat_id, text=TEXT_TASK_COMPLETED.format(score=score, total=20))

        await state.update_data(
            total_score=total_score
        )

        await finish_listening(bot, chat_id, state)


@router.poll_answer(ListeningThirdStates.poll_answer)
async def handle_third_answer(poll_answer: PollAnswer, state: FSMContext):
    data = await state.get_data()
    correct_answer_id = data["correct_answer_id"]
    score = data["score"]
    index = data["index"]
    chat_id = data["chat_id"]

    if poll_answer.option_ids:
        is_correct = correct_answer_id == poll_answer.option_ids[0]
        await state.update_data(
            score=score + (1 if is_correct else 0),
            index=index + 1
        )

    await handle_third_tasks(bot=poll_answer.bot, state=state, chat_id=chat_id)


async def finish_listening(bot: Bot, chat_id: int, state: FSMContext):
    data = await state.get_data()
    total_score = data["total_score"]

    await bot.send_message(
        chat_id=chat_id,
        text=f"{TEXT_ALL_PARTS_COMPLETED}\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{total_score}/45</b>"
    )

    await state.clear()
    await get_back_to_types(bot, chat_id, Sections.listening)
