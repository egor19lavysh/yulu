from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, PollAnswer, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from hsk4.intro import Sections, get_back_to_types
from .service import service
from .states import *

router = Router()

### Callback –∑–Ω–∞—á–µ–Ω–∏—è
CALLBACK_WRITING_VARIANT = "hsk4_writing_variant"

### –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
TEXT_CHOOSE_VARIANT = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
TEXT_PART_1 = "–ó–∞–¥–∞–Ω–∏–µ 1"
TEXT_PART_2 = "–ó–∞–¥–∞–Ω–∏–µ 2"

TEXT_TASK_1 = "–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∏–µ—Ä–æ–≥–ª–∏—Ñ–æ–≤"
TEXT_TASK_2 = (
    "–í–∞–º –¥–∞–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ —Å–ª–æ–≤–∞ –∫ –Ω–∏–º. –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–≤ –ø—Ä–∏–º–µ–¥–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞"
    "\n\n* <i>–±–∞–ª–ª—ã –∑–∞ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏—è —Å—á–∏—Ç–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç, —Ç.–∫. –∑–∞–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã<.i>")

TEXT_NO_TASKS = "–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
TASK_FIRST_WARNING = "\n\n* <i>–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º</i> –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤"
TEXT_TASK_COMPLETED = "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!üéâ\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total}</b>"
TEXT_ALL_TASKS_COMPLETED = "–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total}</b>"
TEXT_ALL_PARTS_COMPLETED = "–í—Å–µ —á–∞—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ"


@router.callback_query(F.data == Sections.reading)
async def show_reading_variants(callback: CallbackQuery):
    variants = service.get_variants()
    builder = InlineKeyboardBuilder()
    for num, variant in enumerate(variants, start=1):
        builder.add(
            InlineKeyboardButton(
                text=f"–í–∞—Ä–∏–∞–Ω—Ç {num}",
                callback_data=f"{CALLBACK_WRITING_VARIANT}_{variant.id}"
            )
        )
    builder.adjust(1)
    await callback.message.answer(TEXT_CHOOSE_VARIANT, reply_markup=builder.as_markup())
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data.startswith(CALLBACK_WRITING_VARIANT))
async def start_reading_variant(callback: CallbackQuery, state: FSMContext):
    var_id = int(callback.data.split("_")[-1])

    await state.update_data(
        variant_id=var_id,
        total_score=0,
        chat_id=callback.message.chat.id
    )

    await callback.message.answer(TEXT_PART_1)
    await start_part_1(callback, state)
    await callback.answer()


async def start_part_1(callback: CallbackQuery, state: FSMContext):
    variant_id = (await state.get_data())["variant_id"]
    if first_tasks := service.get_first_tasks_by_variant(var_id=variant_id):
        await state.update_data(
            first_tasks=first_tasks,
            index=0,
            score=0
        )

        await callback.message.answer(text=TEXT_TASK_1)
        await handle_first_tasks(bot=callback.bot, state=state)

    else:
        await callback.message.answer(TEXT_NO_TASKS)
        await callback.answer()
        await callback.message.answer(TEXT_PART_2)
        await start_part_2(bot=callback.bot, state=state)


async def handle_first_tasks(bot: Bot, state: FSMContext):
    data = await state.get_data()
    tasks = data["first_tasks"]
    chat_id = data["chat_id"]
    index = data["index"]
    score = data["score"]

    if index < len(tasks):
        curr_task = tasks[index]
        await bot.send_message(chat_id=chat_id, text=f"–ò–µ—Ä–æ–≥–ª–∏—Ñ—ã: <b>{curr_task.words}</b>" + TASK_FIRST_WARNING)
        await state.set_state(FirstTask.answer)
    else:
        pass


@router.message(FirstTask.answer)
async def handle_first_answer(msg: Message, state: FSMContext):
    data = await state.get_data()
    tasks = data["first_tasks"]
    chat_id = data["chat_id"]
    index = data["index"]
    score = data["score"]

    curr_task = tasks[index]

    if msg.text:

        if curr_task.correct_sentence == msg.text:
            await msg.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n<b>+ 1 –±–∞–ª–ª</b>")
            await state.update_data(
                score=score + 1
            )
        else:
            await msg.reply(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ –±—É–¥–µ—Ç —Ç–∞–∫: <b>{curr_task.correct_sentence}</b>")
    else:
        await msg.reply("–û—Ç–≤–µ—Ç—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º!")
        await state.set_state(FirstTask.answer)
        return

    await state.update_data(index=index + 1)

    await handle_first_tasks(msg.bot, state)
