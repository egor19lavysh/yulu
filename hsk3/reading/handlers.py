from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, PollAnswer, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from hsk3.intro import Sections, get_back_to_types
from hsk3.reading.service import service
from .states import QuizStates

router = Router()

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEXT_CHOOSE_VARIANT = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
TEXT_PART_1 = "–ß–∞—Å—Ç—å 1 - –ó–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 1"
TEXT_PART_2 = "–ß–∞—Å—Ç—å 2 - –ó–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 2"
TEXT_PART_3 = "–ß–∞—Å—Ç—å 3 - –ó–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 3"
TEXT_TASK_COMPLETED = "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!üéâ\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total}</b>"
TEXT_ALL_PARTS_COMPLETED = "–í—Å–µ —á–∞—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{total_score}</b>"
TEXT_FIRST_TASK_DESCRIPTION = "<b>–°–æ–æ—Ç–Ω–µ—Å–∏—Ç–µ —Ä–µ–ø–ª–∏–∫–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏:</b>"
TEXT_SECOND_TASK_DESCRIPTION = "<b>–í—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∏–µ—Ä–æ–≥–ª–∏—Ñ—ã –ø–æ —Å–º—ã—Å–ª—É –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:</b>"
TEXT_THIRD_TASK_DESCRIPTION = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ —Å—É–∂–¥–µ–Ω–∏–µ –∏–∑ —Ä–µ–ø–ª–∏–∫–∏:</b>"

# Callback –∑–Ω–∞—á–µ–Ω–∏—è
CALLBACK_HSK3_READING = "hsk3_reading"
CALLBACK_READING_VARIANT = "reading_variant"


@router.callback_query(F.data == Sections.reading)
async def show_reading_variants(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã reading –∑–∞–¥–∞–Ω–∏–π"""
    variants = service.get_reading_variants()
    if not variants:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–¥–∞–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for num, variant in enumerate(variants, start=1):
        builder.add(
            InlineKeyboardButton(
                text=f"–í–∞—Ä–∏–∞–Ω—Ç {num}",
                callback_data=f"{CALLBACK_READING_VARIANT}_{variant.id}"
            )
        )
    builder.adjust(1)

    await callback.message.answer(TEXT_CHOOSE_VARIANT, reply_markup=builder.as_markup())
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data.startswith(CALLBACK_READING_VARIANT))
async def start_reading_variant(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    variant_id = int(callback.data.split("_")[-1])
    variant = service.get_reading_variant(variant_id)

    if not variant:
        await callback.message.answer("–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        variant_id=variant_id,
        total_score=0
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    await callback.message.answer(TEXT_PART_1)
    await start_part_1(callback, state, variant_id)
    await callback.answer()


# --- –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å (–ó–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 1) ---
async def start_part_1(callback: CallbackQuery, state: FSMContext, variant_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å - –∑–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 1"""
    first_tasks = service.get_first_tasks_by_variant(variant_id)

    if not first_tasks:
        await callback.message.answer("–ó–∞–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–π –Ω–µ—Ç
        await callback.message.answer(TEXT_PART_2)
        await start_part_2_direct(callback.bot, callback.message.chat.id, state)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        first_tasks=first_tasks,
        current_task_index=0,
        part_score=0
    )

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    await send_next_first_task(callback.bot, callback.message.chat.id, state)


async def send_next_first_task(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ 1"""
    data = await state.get_data()
    first_tasks = data["first_tasks"]
    current_task_index = data["current_task_index"]

    if current_task_index < len(first_tasks):
        current_task = first_tasks[current_task_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
        task_text = TEXT_FIRST_TASK_DESCRIPTION + "\n\n"
        for option in current_task.options:
            task_text += f"{option.letter}. {option.text}\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            current_question_index=0,
            questions=current_task.questions,
            options=[option.letter for option in current_task.options]
        )

        await bot.send_message(chat_id, task_text)
        await send_next_first_question(bot, chat_id, state)
    else:
        # –í—Å–µ –∑–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 1 –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        part_score = data["part_score"]
        total_score = data["total_score"] + part_score
        total_questions = sum(len(task.questions) for task in first_tasks)

        await state.update_data(total_score=total_score)
        await bot.send_message(
            chat_id,
            TEXT_TASK_COMPLETED.format(score=part_score, total=total_questions)
        )

        # –û—á–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
        new_data = {
            k: v for k, v in data.items()
            if k not in ["first_tasks", "current_task_index", "current_question_index", "questions", "options",
                         "part_score"]
        }
        new_data["total_score"] = total_score
        await state.set_data(new_data)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
        await bot.send_message(chat_id, TEXT_PART_2)
        await start_part_2_direct(bot, chat_id, state)


async def send_next_first_question(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–¥–∞–Ω–∏–∏ —Ç–∏–ø–∞ 1"""
    data = await state.get_data()
    current_question_index = data["current_question_index"]
    questions = data["questions"]
    options = data["options"]
    current_task_index = data["current_task_index"]

    if current_question_index < len(questions):
        question = questions[current_question_index]

        await bot.send_poll(
            chat_id=chat_id,
            question=f"–í–æ–ø—Ä–æ—Å {current_question_index + 1}\n{question.text}",
            options=options,
            type="quiz",
            correct_option_id=ord(question.correct_letter) - ord('A'),
            is_anonymous=False
        )
        await state.set_state(QuizStates.WAITING_FOR_ANSWER)
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        await state.update_data(current_task_index=data["current_task_index"] + 1)
        await send_next_first_task(bot, chat_id, state)


# --- –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å (–ó–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 2) ---
async def start_part_2_direct(bot: Bot, chat_id: int, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –Ω–∞–ø—Ä—è–º—É—é"""
    data = await state.get_data()
    variant_id = data["variant_id"]
    second_tasks = service.get_second_tasks_by_variant(variant_id)

    if not second_tasks:
        await bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –Ω–µ—Ç
        await bot.send_message(chat_id, TEXT_PART_3)
        await start_part_3_direct(bot, chat_id, state)
        return

    await state.update_data(
        second_tasks=second_tasks,
        current_task_index=0,
        part_score=0
    )

    await send_next_second_task(bot, chat_id, state)


async def send_next_second_task(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ 2"""
    data = await state.get_data()
    second_tasks = data["second_tasks"]
    current_task_index = data["current_task_index"]

    if current_task_index >= len(second_tasks):
        # –í—Å–µ –∑–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 2 –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        part_score = data["part_score"]
        total_score = data["total_score"] + part_score
        total_questions = sum(len(task.questions) for task in second_tasks)

        await state.update_data(total_score=total_score)
        await bot.send_message(
            chat_id,
            TEXT_TASK_COMPLETED.format(score=part_score, total=total_questions)
        )

        # –û—á–∏—Å—Ç–∏–º –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
        new_data = {
            k: v for k, v in data.items()
            if k not in ["second_tasks", "current_task_index", "current_question_index", "questions", "options",
                         "part_score"]
        }
        new_data["total_score"] = total_score
        await state.set_data(new_data)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
        await bot.send_message(chat_id, TEXT_PART_3)
        await start_part_3_direct(bot, chat_id, state)
        return

    current_task = second_tasks[current_task_index]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    task_text = TEXT_SECOND_TASK_DESCRIPTION + "\n\n"
    for option in current_task.options:
        task_text += f"{option.letter}. {option.text}\n"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        current_question_index=0,
        questions=current_task.questions,
        options=[option.letter for option in current_task.options]
    )

    await bot.send_message(chat_id, task_text)
    await send_next_second_question(bot, chat_id, state)


async def send_next_second_question(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ–∫—É—â–µ–º –∑–∞–¥–∞–Ω–∏–∏ —Ç–∏–ø–∞ 2"""
    data = await state.get_data()
    current_question_index = data["current_question_index"]
    questions = data["questions"]
    options = data["options"]

    if current_question_index < len(questions):
        question = questions[current_question_index]

        await bot.send_poll(
            chat_id=chat_id,
            question=f"–í–æ–ø—Ä–æ—Å {current_question_index + 1}\n{question.text}",
            options=options,
            type="quiz",
            correct_option_id=ord(question.correct_letter) - ord('A'),
            is_anonymous=False
        )
        await state.set_state(QuizStates.WAITING_FOR_ANSWER)
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
        await state.update_data(current_task_index=data["current_task_index"] + 1)
        await send_next_second_task(bot, chat_id, state)


# --- –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å (–ó–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 3) ---
async def start_part_3_direct(bot: Bot, chat_id: int, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å –Ω–∞–ø—Ä—è–º—É—é"""
    data = await state.get_data()
    variant_id = data["variant_id"]
    third_tasks = service.get_third_tasks_by_variant(variant_id)

    if not third_tasks:
        await bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏—è —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ –Ω–µ—Ç
        total_score = data["total_score"]
        await bot.send_message(
            chat_id,
            TEXT_ALL_PARTS_COMPLETED.format(total_score=total_score)
        )
        await state.clear()
        await get_back_to_types(bot, chat_id, Sections.reading)
        return

    await state.update_data(
        third_tasks=third_tasks,
        current_task_index=0,
        part_score=0
    )

    await send_next_third_task(bot, chat_id, state)


async def send_next_third_task(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ 3"""
    data = await state.get_data()
    third_tasks = data["third_tasks"]
    current_task_index = data["current_task_index"]

    if current_task_index < len(third_tasks):
        task = third_tasks[current_task_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
        task_text = (
            f"–ó–∞–¥–∞–Ω–∏–µ {current_task_index + 1}/{len(third_tasks)}\n\n"
            f"{TEXT_THIRD_TASK_DESCRIPTION}\n\n"
            f"{task.text}"  # –£–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å task.question
        )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = [f"{opt.letter}. {opt.text}" for opt in task.options]
        correct_index = ord(task.correct_letter) - ord('A')

        await bot.send_message(chat_id, task_text)
        await bot.send_poll(
            chat_id=chat_id,
            question="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:",
            options=options,
            type="quiz",
            correct_option_id=correct_index,
            is_anonymous=False
        )

        await state.update_data(current_task_index=current_task_index + 1)
        await state.set_state(QuizStates.WAITING_FOR_ANSWER)
    else:
        # –í—Å–µ –∑–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ 3 –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        part_score = data["part_score"]
        total_score = data["total_score"] + part_score

        await bot.send_message(
            chat_id,
            TEXT_TASK_COMPLETED.format(score=part_score, total=len(third_tasks))
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å—é –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        if data.get("full_test_mode"):
            from hsk3.full_test import complete_reading_and_start_writing
            await complete_reading_and_start_writing(bot, chat_id, state, total_score, 0)  # total –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        else:
            await bot.send_message(
                chat_id,
                TEXT_ALL_PARTS_COMPLETED.format(total_score=total_score)
            )
            await state.clear()
            await get_back_to_types(bot, chat_id, Sections.reading)


# –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π
@router.poll_answer(QuizStates.WAITING_FOR_ANSWER)
async def handle_reading_poll_answer(poll_answer: PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤—Å–µ —Ç–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π —á—Ç–µ–Ω–∏—è"""
    data = await state.get_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∞—è —á–∞—Å—Ç—å —Å–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ –Ω–∞–ª–∏—á–∏—é –∫–ª—é—á–µ–π
    if "first_tasks" in data and "second_tasks" not in data and "third_tasks" not in data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
        current_question_index = data["current_question_index"]
        questions = data["questions"]

        is_correct = poll_answer.option_ids[0] == ord(questions[current_question_index].correct_letter) - ord('A')

        await state.update_data(
            current_question_index=current_question_index + 1,
            part_score=data["part_score"] + int(is_correct)
        )

        await send_next_first_question(poll_answer.bot, poll_answer.user.id, state)

    elif "second_tasks" in data and "third_tasks" not in data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
        current_question_index = data["current_question_index"]
        questions = data["questions"]

        is_correct = poll_answer.option_ids[0] == ord(questions[current_question_index].correct_letter) - ord('A')

        await state.update_data(
            current_question_index=current_question_index + 1,
            part_score=data["part_score"] + int(is_correct)
        )

        await send_next_second_question(poll_answer.bot, poll_answer.user.id, state)

    elif "third_tasks" in data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
        current_task_index = data["current_task_index"] - 1  # –ò–Ω–¥–µ–∫—Å —É–∂–µ —É–≤–µ–ª–∏—á–µ–Ω –≤ send_next_third_task
        if current_task_index >= 0 and current_task_index < len(data["third_tasks"]):
            task = data["third_tasks"][current_task_index]

            is_correct = poll_answer.option_ids[0] == ord(task.correct_letter) - ord('A')

            await state.update_data(
                part_score=data["part_score"] + int(is_correct)
            )

        await send_next_third_task(poll_answer.bot, poll_answer.user.id, state)
