from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from hsk3.intro import Sections, get_back_to_types

# –ò–º–ø–æ—Ä—Ç—ã —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
from hsk3.listening.service import service as listening_service
from hsk3.reading.service import service as reading_service
from hsk3.writing.service import service as writing_service

# –ò–º–ø–æ—Ä—Ç—ã —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–∞–∑–¥–µ–ª–æ–≤
from hsk3.listening.handlers import start_listening_variant
from hsk3.reading.handlers import start_reading_variant
from hsk3.writing.handlers import start_first_tasks

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TEXT_CHOOSE_FULL_VARIANT = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è HSK 3:"
TEXT_STARTING_LISTENING = "üéß <b>–†–∞–∑–¥–µ–ª 1: –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ</b>"
TEXT_STARTING_READING = "üìñ <b>–†–∞–∑–¥–µ–ª 2: –ß—Ç–µ–Ω–∏–µ</b>"
TEXT_STARTING_WRITING = "‚úçÔ∏è <b>–†–∞–∑–¥–µ–ª 3: –ü–∏—Å—å–º–æ</b>"
TEXT_FULL_TEST_COMPLETED = """
üéâ <b>–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç HSK 3 –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üìä <b>–ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:</b>
üéß –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {listening_score}
üìñ –ß—Ç–µ–Ω–∏–µ: {reading_score}
‚úçÔ∏è –ü–∏—Å—å–º–æ: {writing_score}

<b>–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {total_score} –∏–∑ {total_possible}</b>
"""

CALLBACK_FULL_VARIANT = "full_variant"


@router.callback_query(F.data == "hsk3_full_test")
async def show_full_variants(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    listening_variants = listening_service.get_listening_variants()
    reading_variants = reading_service.get_reading_variants()
    writing_variants = writing_service.get_reading_variants()

    # –ù–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    min_variants_count = min(len(listening_variants), len(reading_variants), len(writing_variants))

    if min_variants_count == 0:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–ª–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for i in range(min_variants_count):
        builder.add(
            InlineKeyboardButton(
                text=f"–ü–æ–ª–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç {i + 1}",
                callback_data=f"{CALLBACK_FULL_VARIANT}_{i}"
            )
        )
    builder.adjust(1)

    await callback.message.answer(TEXT_CHOOSE_FULL_VARIANT, reply_markup=builder.as_markup())
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data.startswith(CALLBACK_FULL_VARIANT))
async def start_full_variant(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    variant_index = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
    listening_variants = listening_service.get_listening_variants()
    reading_variants = reading_service.get_reading_variants()
    writing_variants = writing_service.get_reading_variants()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ –∏–Ω–¥–µ–∫—Å—É
    listening_variant = listening_variants[variant_index]
    reading_variant = reading_variants[variant_index]
    writing_variant_list = writing_variants[variant_index]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∑–∞–¥–∞—á–∞–º–∏
    listening_full = listening_service.get_listening_variant(listening_variant.id)
    reading_full = reading_service.get_reading_variant(reading_variant.id)
    writing_full = writing_service.get_variant_by_id(writing_variant_list.id)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    # –ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
    listening_first_tasks = listening_service.get_first_tasks_by_variant(listening_variant.id)
    listening_second_tasks = listening_service.get_second_tasks_by_variant(listening_variant.id)
    listening_third_tasks = listening_service.get_third_tasks_by_variant(listening_variant.id)

    listening_total = (
            sum(len(task.questions) for task in listening_first_tasks) +
            len(listening_second_tasks) +
            sum(len(task.questions) for task in listening_third_tasks)
    )

    # –ß—Ç–µ–Ω–∏–µ
    reading_first_tasks = reading_service.get_first_tasks_by_variant(reading_variant.id)
    reading_second_tasks = reading_service.get_second_tasks_by_variant(reading_variant.id)
    reading_third_tasks = reading_service.get_third_tasks_by_variant(reading_variant.id)

    reading_total = (
            sum(len(task.questions) for task in reading_first_tasks) +
            sum(len(task.questions) for task in reading_second_tasks) +
            len(reading_third_tasks)
    )

    # –ü–∏—Å—å–º–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
    writing_total = len(writing_full.first_tasks) + len(writing_full.second_tasks)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    await state.update_data(
        full_test_mode=True,
        full_test_variant_index=variant_index,
        variant_ids={
            "listening": listening_variant.id,
            "reading": reading_variant.id,
            "writing": writing_variant_list.id
        },
        current_section="listening",
        section_results={
            "listening": {"score": 0, "total": listening_total},
            "reading": {"score": 0, "total": reading_total},
            "writing": {"score": 0, "total": writing_total}
        }
    )

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    await callback.message.answer(TEXT_STARTING_LISTENING)
    await start_listening_section(callback, state, listening_variant.id)
    await callback.answer()


async def start_listening_section(callback: CallbackQuery, state: FSMContext, variant_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–∑–¥–µ–ª –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç CallbackQuery —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    from types import SimpleNamespace

    # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é CallbackQuery –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    fake_callback = SimpleNamespace()
    fake_callback.data = f"listening_variant_{variant_id}"
    fake_callback.bot = callback.bot
    fake_callback.message = callback.message
    fake_callback.answer = callback.answer

    # –í—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    await start_listening_variant(fake_callback, state)


async def complete_listening_and_start_reading(bot: Bot, chat_id: int, state: FSMContext, score: int, total: int):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç —á—Ç–µ–Ω–∏–µ"""
    data = await state.get_data()
    section_results = data["section_results"]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º score
    section_results["listening"]["score"] = score

    await state.update_data(
        current_section="reading",
        section_results=section_results
    )

    await bot.send_message(chat_id, TEXT_STARTING_READING)

    # –°–æ–∑–¥–∞–µ–º –∏–º–∏—Ç–∞—Ü–∏—é CallbackQuery –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —á—Ç–µ–Ω–∏—è
    from types import SimpleNamespace

    fake_callback = SimpleNamespace()
    fake_callback.data = f"reading_variant_{data['variant_ids']['reading']}"
    fake_callback.bot = bot
    fake_callback.message = SimpleNamespace()
    fake_callback.message.chat = SimpleNamespace()
    fake_callback.message.chat.id = chat_id
    fake_callback.message.answer = lambda text, reply_markup=None: bot.send_message(chat_id, text,
                                                                                    reply_markup=reply_markup)
    fake_callback.message.delete = lambda: None
    fake_callback.answer = lambda: None

    await start_reading_variant(fake_callback, state)


async def complete_reading_and_start_writing(bot: Bot, chat_id: int, state: FSMContext, score: int, total: int):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —á—Ç–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–∏—Å—å–º–æ"""
    data = await state.get_data()
    section_results = data["section_results"]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º score
    section_results["reading"]["score"] = score

    await state.update_data(
        current_section="writing",
        section_results=section_results
    )

    await bot.send_message(chat_id, TEXT_STARTING_WRITING)

    # –ü–æ–ª—É—á–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –ø–∏—Å—å–º–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    variant_id = data['variant_ids']['writing']
    var = writing_service.get_variant_by_id(variant_id=variant_id)

    await state.update_data(
        variant=var,
        first_tasks=var.first_tasks,
        second_tasks=var.second_tasks,
        total_score=0,
        current_part="first"
    )

    await start_first_tasks(bot, chat_id, state)


async def complete_full_test(bot: Bot, chat_id: int, state: FSMContext, writing_score: int, writing_total: int):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç"""
    data = await state.get_data()
    section_results = data["section_results"]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º score
    section_results["writing"]["score"] = writing_score

    total_score = sum(result["score"] for result in section_results.values())
    total_possible = sum(result["total"] for result in section_results.values())

    await bot.send_message(
        chat_id,
        TEXT_FULL_TEST_COMPLETED.format(
            listening_score=f"{section_results['listening']['score']}/{section_results['listening']['total']}",
            reading_score=f"{section_results['reading']['score']}/{section_results['reading']['total']}",
            writing_score=f"{section_results['writing']['score']}/{section_results['writing']['total']}",
            total_score=total_score,
            total_possible=total_possible
        )
    )

    await state.clear()
    await get_back_to_types(bot, chat_id, Sections.full_test)
