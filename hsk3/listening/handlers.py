from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, PollAnswer
from aiogram.utils.keyboard import InlineKeyboardBuilder
from hsk3.intro import Sections, get_back_to_types
from .service import service  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤
from .states import ListeningFirstStates, ListeningSecondStates, ListeningThirdStates

router = Router()

# –¢–µ–∫—Å—Ç—ã
TEXT_CHOOSE_VARIANT = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
TEXT_PART_1 = "–ß–∞—Å—Ç—å 1"
TEXT_PART_2 = "–ß–∞—Å—Ç—å 2"
TEXT_PART_3 = "–ß–∞—Å—Ç—å 3"
TEXT_TASK_COMPLETED = "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!üéâ\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total}</b>"
TEXT_ALL_PARTS_COMPLETED = "–í—Å–µ —á–∞—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ"

# Callback –∑–Ω–∞—á–µ–Ω–∏—è
CALLBACK_HSK3_LISTENING = "hsk3_listening"
CALLBACK_LISTENING_VARIANT = "listening_variant"

# –¢–µ–∫—Å—Ç—ã –∑–∞–¥–∞–Ω–∏–π
FIRST_TASK_TEXT = "<b>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ä–µ–ø–ª–∏–∫–∞–º–∏:</b>"
PICTURES_CHOICE = "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫</b>"
SECOND_TASK_TEXT = "<b>–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –≤–µ—Ä–Ω—ã –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>"
THIRD_TASK_TEXT = "<b>–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ä–µ–ø–ª–∏–∫–∏ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b>"
TEXT_TRUE = "–ü—Ä–∞–≤–¥–∞"
TEXT_FALSE = "–õ–æ–∂—å"


@router.callback_query(F.data == Sections.listening)
async def show_listening_variants(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã listening –∑–∞–¥–∞–Ω–∏–π"""
    variants = service.get_listening_variants()
    if not variants:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–¥–∞–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        await callback.answer()
        return
    builder = InlineKeyboardBuilder()
    for num, variant in enumerate(variants, start=1):
        builder.add(
            InlineKeyboardButton(
                text=f"–í–∞—Ä–∏–∞–Ω—Ç {num}",
                callback_data=f"{CALLBACK_LISTENING_VARIANT}_{variant.id}"
            )
        )
    builder.adjust(1)
    await callback.message.answer(TEXT_CHOOSE_VARIANT, reply_markup=builder.as_markup())
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data.startswith(CALLBACK_LISTENING_VARIANT))
async def start_listening_variant(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    variant_id = int(callback.data.split("_")[-1])
    variant = service.get_listening_variant(variant_id)
    if not variant:
        await callback.message.answer("–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        variant_id=variant_id,
        total_score=0
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
    try:
        await callback.bot.send_audio(
            chat_id=callback.message.chat.id,
            audio=variant.audio_id
        )
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    await callback.message.answer(TEXT_PART_1)
    await start_part_1(callback, state, variant_id)
    await callback.answer()


# --- –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å ---
async def start_part_1(callback: CallbackQuery, state: FSMContext, variant_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å - FirstTask. –ó–∞–¥–∞–Ω–∏—è –∏–¥—É—Ç —Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ."""
    first_tasks = service.get_first_tasks_by_variant(variant_id)
    if not first_tasks:
        await callback.message.answer("–ó–∞–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await callback.answer()
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –ø–µ—Ä–≤–æ–π –Ω–µ—Ç
        await callback.message.answer(TEXT_PART_2)
        await start_part_2_direct(callback.bot, callback.message.chat.id, state)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π (FirstTask) –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        first_tasks=[task for task in first_tasks],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã FirstTask
        current_task_index=0,  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ FirstTask
        part_score=0
    )

    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
    await send_next_first_task(callback.bot, callback.message.chat.id, state)


async def send_next_first_task(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ FirstTask (–∫–∞—Ä—Ç–∏–Ω–∫–∞ + –≤–æ–ø—Ä–æ—Å—ã)"""
    data = await state.get_data()
    first_tasks = data["first_tasks"]
    current_task_index = data["current_task_index"]

    if current_task_index < len(first_tasks):
        current_task = first_tasks[current_task_index]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await bot.send_photo(
            chat_id=chat_id,
            photo=current_task.picture_id,
            caption=f"{PICTURES_CHOICE} - –ó–∞–¥–∞–Ω–∏–µ {current_task_index + 1}"
        )

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        questions = current_task.questions  # –≠—Ç–æ —Å–ø–∏—Å–æ–∫ FirstTaskQuestion

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ (A, B, C, D, etc.) –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ FirstTask –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π –Ω–∞–±–æ—Ä –±—É–∫–≤
        if questions:
            options = list(set([q.correct_letter for q in questions]))
            options.sort()
        else:
            options = []

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await state.update_data(
            current_question_index=0,  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–∫—É—â–µ–≥–æ FirstTask
            questions=questions,  # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ–∫—É—â–µ–≥–æ FirstTask
            options=options,  # –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ FirstTask
            total_questions=len(questions)  # –û–±—â–µ–µ –∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º FirstTask
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        await send_next_first_question_in_task(bot, chat_id, state)

    else:
        # –í—Å–µ FirstTask –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        part_score = data["part_score"]
        total_score = data["total_score"] + part_score
        await state.update_data(total_score=total_score)
        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_TASK_COMPLETED.format(score=part_score, total=sum(len(task.questions) for task in first_tasks))
        )
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
        await bot.send_message(chat_id=chat_id, text=TEXT_PART_2)
        await start_part_2_direct(bot, chat_id, state)


async def send_next_first_question_in_task(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ FirstTask"""
    data = await state.get_data()
    current_question_index = data["current_question_index"]
    questions = data["questions"]  # –í–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ FirstTask
    options = data["options"]  # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ FirstTask
    total_questions = data["total_questions"]  # –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º FirstTask
    current_task_index = data["current_task_index"]  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞–¥–∞–Ω–∏—è

    if current_question_index < len(questions):
        next_question = questions[current_question_index]
        correct_answer = next_question.correct_letter
        try:
            correct_option_id = options.index(correct_answer)
        except ValueError:
            await bot.send_message(chat_id,
                                   f"–û—à–∏–±–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '{correct_answer}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø—Ü–∏–π {options} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {next_question.id}.")
            return

        await bot.send_poll(
            chat_id=chat_id,
            question=f"–ó–∞–¥–∞–Ω–∏–µ {current_task_index + 1}, –í–æ–ø—Ä–æ—Å {current_question_index + 1} –∏–∑ {total_questions}",
            options=options,
            type="quiz",
            correct_option_id=correct_option_id,
            is_anonymous=False
        )
        await state.set_state(ListeningFirstStates.answer)
    else:
        # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ FirstTask –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É FirstTask
        await state.update_data(current_task_index=data["current_task_index"] + 1)
        await send_next_first_task(bot, chat_id, state)


@router.poll_answer(ListeningFirstStates.answer)
async def handle_first_poll_answer(poll_answer: PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()
    current_question_index = data["current_question_index"]
    questions = data["questions"]  # –í–æ–ø—Ä–æ—Å—ã —Ç–µ–∫—É—â–µ–≥–æ FirstTask
    options = data["options"]  # –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ FirstTask

    if current_question_index >= len(questions):
        # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        return

    current_question = questions[current_question_index]
    correct_option_id = options.index(current_question.correct_letter)
    is_correct = poll_answer.option_ids[0] == correct_option_id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    await state.update_data(
        current_question_index=current_question_index + 1,
        part_score=data["part_score"] + int(is_correct)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é
    await send_next_first_question_in_task(poll_answer.bot, poll_answer.user.id, state)


# --- –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å ---
async def start_part_2_direct(bot: Bot, chat_id: int, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –Ω–∞–ø—Ä—è–º—É—é"""
    data = await state.get_data()
    variant_id = data["variant_id"]
    second_tasks = service.get_second_tasks_by_variant(variant_id)
    if not second_tasks:
        await bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–π –Ω–µ—Ç
        await bot.send_message(chat_id, text=TEXT_PART_3)
        await start_part_3_direct(bot, chat_id, state)
        return

    await bot.send_message(chat_id, text=SECOND_TASK_TEXT)
    await state.update_data(
        current_index=0,
        questions=[{"id": task.id, "text": task.text, "is_correct": task.is_correct} for task in second_tasks],
        part_score=0
    )
    await send_next_second_question(bot, chat_id, state)


async def send_next_second_question(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()
    current_index = data["current_index"]
    questions = data["questions"]
    if current_index < len(questions):
        current_question = questions[current_index]
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text=TEXT_TRUE,
                callback_data=f"true_{current_index}"
            ),
            InlineKeyboardButton(
                text=TEXT_FALSE,
                callback_data=f"false_{current_index}"
            )
        )
        await bot.send_message(
            chat_id=chat_id,
            text=f"–í–æ–ø—Ä–æ—Å {current_index + 1}/{len(questions)}\n{current_question['text']}",
            reply_markup=builder.as_markup()
        )
        await state.set_state(ListeningSecondStates.answer)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç—Ä–µ—Ç—å–µ–π
        part_score = data["part_score"]
        total_score = data["total_score"] + part_score
        await state.update_data(total_score=total_score)
        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_TASK_COMPLETED.format(score=part_score, total=len(questions))
        )
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
        await bot.send_message(chat_id=chat_id, text=TEXT_PART_3)
        await start_part_3_direct(bot, chat_id, state)


@router.callback_query(F.data.startswith(("true_", "false_")))
async def handle_second_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()
    current_index = data["current_index"]
    questions = data["questions"]

    try:
        user_answer, question_idx_str = callback.data.split("_")
        question_idx = int(question_idx_str)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞.", show_alert=True)
        return

    if question_idx != current_index:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É!", show_alert=True)
        return

    current_question = questions[current_index]
    is_correct = (user_answer == "true") == current_question["is_correct"]
    new_score = data["part_score"] + int(is_correct)
    new_index = current_index + 1
    await state.update_data(
        current_index=new_index,
        part_score=new_score
    )
    feedback = "‚úÖ –í–µ—Ä–Ω–æ!" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"
    correct_answer = TEXT_TRUE if current_question["is_correct"] else TEXT_FALSE
    await callback.message.edit_text(
        f"{callback.message.text}\n{feedback}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Å—Ç—å
    await send_next_second_question(callback.bot, callback.message.chat.id, state)
    await callback.answer()


# --- –¢—Ä–µ—Ç—å—è —á–∞—Å—Ç—å ---
async def start_part_3_direct(bot: Bot, chat_id: int, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å –Ω–∞–ø—Ä—è–º—É—é"""
    data = await state.get_data()
    variant_id = data["variant_id"]
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å ThirdTask
    # —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ ThirdTaskQuestion –∏ ThirdTaskOption
    third_tasks = service.get_third_tasks_by_variant(variant_id)
    if not third_tasks:
        await bot.send_message(chat_id, "–ó–∞–¥–∞–Ω–∏—è —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ –Ω–µ—Ç
        total_score = data["total_score"]
        await bot.send_message(
            chat_id=chat_id,
            text=f"{TEXT_ALL_PARTS_COMPLETED}\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{total_score}</b>"
        )
        await state.clear()
        await get_back_to_types(bot, chat_id, Sections.listening)
        return

    await bot.send_message(chat_id, text=THIRD_TASK_TEXT)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –æ–ø—Ü–∏—è–º–∏
    all_questions_data = []
    for task in third_tasks:
        for question in task.questions:  # ThirdTaskQuestion
            # –°–æ–±–∏—Ä–∞–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            options_dict = {opt.letter: opt.text for opt in question.options}  # ThirdTaskOption
            all_questions_data.append({
                'question_id': question.id,
                'correct_letter': question.correct_letter,
                'options': options_dict  # {'A': '–¢–µ–∫—Å—Ç A', 'B': '–¢–µ–∫—Å—Ç B', ...}
            })

    await state.update_data(
        current_index=0,
        questions=all_questions_data,  # –°–ø–∏—Å–æ–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        part_score=0,
        total_questions=len(all_questions_data)
    )
    await send_next_third_question(bot, chat_id, state)


async def send_next_third_question(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()
    current_index = data["current_index"]
    questions_data = data["questions"]  # –°–ø–∏—Å–æ–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    total_questions = data["total_questions"]

    if current_index < total_questions:
        current_question_data = questions_data[current_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø—Ü–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ ["A. –¢–µ–∫—Å—Ç A", "B. –¢–µ–∫—Å—Ç B", ...]
        options_list = [f"{letter}. {text}" for letter, text in current_question_data['options'].items()]
        options_list.sort()  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±—É–∫–≤–∞–º

        # –ù–∞—Ö–æ–¥–∏–º ID –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è Poll
        correct_option_text = f"{current_question_data['correct_letter']}. {current_question_data['options'][current_question_data['correct_letter']]}"
        try:
            correct_option_id = options_list.index(correct_option_text)
        except ValueError:
            await bot.send_message(chat_id,
                                   f"–û—à–∏–±–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç '{correct_option_text}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –æ–ø—Ü–∏–π {options_list} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {current_question_data['question_id']}.")
            return

        await bot.send_poll(
            chat_id=chat_id,
            question=f"–í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {total_questions}",
            options=options_list,
            type="quiz",
            correct_option_id=correct_option_id,
            is_anonymous=False
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        await state.update_data(correct_option_id=correct_option_id)
        await state.set_state(ListeningThirdStates.answer)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å –∏ –≤–µ—Å—å —Ç–µ—Å—Ç
        part_score = data["part_score"]
        total_score = data["total_score"] + part_score
        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_TASK_COMPLETED.format(score=part_score, total=total_questions)
        )
        await bot.send_message(
            chat_id=chat_id,
            text=f"{TEXT_ALL_PARTS_COMPLETED}\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{total_score}</b>"
        )
        await state.clear()
        await get_back_to_types(bot, chat_id, Sections.listening)


@router.poll_answer(ListeningThirdStates.answer)
async def handle_third_poll_answer(poll_answer: PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if "correct_option_id" not in data:
        # –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—ã–ª–æ –ø–æ—Ç–µ—Ä—è–Ω–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∏—à–µ–ª –Ω–µ—Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ
        return

    is_correct = poll_answer.option_ids[0] == data["correct_option_id"]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    await state.update_data(
        current_index=data["current_index"] + 1,
        part_score=data["part_score"] + int(is_correct)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Å—Ç—å
    await send_next_third_question(poll_answer.bot, poll_answer.user.id, state)
