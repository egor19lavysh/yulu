import random

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, PollAnswer
from aiogram.utils.keyboard import InlineKeyboardBuilder
from hsk3.intro import Sections
from hsk3.services import listening_service
from hsk3.states import ListeningStates

router = Router()

# –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫
TEXT_TYPE_ONE = "–¢–∏–ø 1"
TEXT_TYPE_TWO = "–¢–∏–ø 2"
TEXT_TYPE_THREE = "–¢–∏–ø 3"
TEXT_CHOOSE_TASK_TYPE = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è"

# Callback –∑–Ω–∞—á–µ–Ω–∏—è
CALLBACK_HSK3_LISTENING = "hsk3_listening"
CALLBACK_TYPE_ONE_TASKS = "hsk_3_listening_type_one_tasks"
CALLBACK_TYPE_TWO_TASKS = "hsk_3_listening_type_two_tasks"
CALLBACK_TYPE_THREE_TASKS = "hsk_3_listening_type_three_tasks"

# –¢–µ–∫—Å—Ç—ã –∑–∞–¥–∞–Ω–∏–π
FIRST_TASK_TEXT = "<b>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ä–µ–ø–ª–∏–∫–∞–º–∏:</b>"
PICTURES_CHOICE = "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫</b>"
TEXT_TASK_COMPLETED = "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!üéâ\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total}</b>"

# –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
SECOND_TASK_TEXT = "<b>–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –≤–µ—Ä–Ω—ã –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>"
TEXT_TRUE = "–ü—Ä–∞–≤–¥–∞"
TEXT_FALSE = "–õ–æ–∂—å"


@router.callback_query(F.data == Sections.listening)
async def show_task_types(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.add(
        InlineKeyboardButton(text=TEXT_TYPE_ONE, callback_data=CALLBACK_TYPE_ONE_TASKS),
        InlineKeyboardButton(text=TEXT_TYPE_TWO, callback_data=CALLBACK_TYPE_TWO_TASKS),
        InlineKeyboardButton(text=TEXT_TYPE_THREE, callback_data=CALLBACK_TYPE_THREE_TASKS)
    )
    builder.adjust(1)

    await callback.message.answer(TEXT_CHOOSE_TASK_TYPE, reply_markup=builder.as_markup())
    await callback.message.delete()
    await callback.answer()


@router.callback_query(F.data == CALLBACK_TYPE_ONE_TASKS)
async def get_first_task(callback: CallbackQuery, state: FSMContext):
    task = listening_service.get_test_first_task()

    await callback.message.answer(text=FIRST_TASK_TEXT)
    await callback.bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=task.picture_id,
        caption=PICTURES_CHOICE
    )

    await state.update_data(
        current_index=0,  # –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∫–∞–∫ –≤ reading
        questions=task.questions,
        score=0,
        options=[q.correct_letter for q in task.questions]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    )

    await send_next_question(callback.bot, callback.message.chat.id, state)
    await callback.answer()


async def send_next_question(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç."""
    data = await state.get_data()

    current_index = data["current_index"]
    questions = data["questions"]
    options = data["options"]

    if current_index < len(questions):
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        sorted_options = sorted(options)

        next_question = questions[current_index]
        correct_answer = next_question.correct_letter

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ
        correct_option_id = sorted_options.index(correct_answer)

        await bot.send_poll(
            chat_id=chat_id,
            question=f"–í–æ–ø—Ä–æ—Å {current_index + 1}",
            options=sorted_options,
            type="quiz",
            correct_option_id=correct_option_id,
            is_anonymous=False
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        await state.set_state(ListeningStates.answer)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
        score = data["score"]
        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_TASK_COMPLETED.format(score=score, total=len(questions))
        )
        await state.clear()


async def handle_listening_answer(poll_answer: PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    data = await state.get_data()

    current_index = data["current_index"]
    questions = data["questions"]
    options = data["options"]

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    current_question = questions[current_index]

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∞–∫ –∂–µ, –∫–∞–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ
    sorted_options = sorted(options)
    correct_option_id = sorted_options.index(current_question.correct_letter)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    is_correct = poll_answer.option_ids[0] == correct_option_id

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(
        current_index=current_index + 1,
        score=data["score"] + int(is_correct)
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_next_question(poll_answer.bot, poll_answer.user.id, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ–ø—Ä–æ—Å—ã - –∫–ª—é—á–µ–≤–∞—è —á–∞—Å—Ç—å!
@router.poll_answer(ListeningStates.answer)
async def handle_poll_answer(poll_answer: PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏—è."""
    await handle_listening_answer(poll_answer, state)


@router.callback_query(F.data == CALLBACK_TYPE_TWO_TASKS)
async def start_second_task(callback: CallbackQuery, state: FSMContext):
    tasks = listening_service.get_test_second_tasks()

    await callback.message.answer(text=SECOND_TASK_TEXT)

    await state.update_data(
        current_index=0,
        questions=[{"text": task.text, "is_correct": task.is_correct} for task in tasks],
        score=0,
        total=len(tasks)
    )

    await send_next_truefalse_question(callback.bot, callback.message.chat.id, state)
    await callback.answer()


async def send_next_truefalse_question(bot: Bot, chat_id: int, state: FSMContext):
    data = await state.get_data()
    current_index = data["current_index"]
    questions = data["questions"]

    if current_index < len(questions):
        current_question = questions[current_index]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ü—Ä–∞–≤–¥–∞/–õ–æ–∂—å
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text=TEXT_TRUE,
                callback_data=f"true_{current_index}"
            ),
            InlineKeyboardButton(
                text=TEXT_FALSE,
                callback_data=f"false_{current_index}"
            )
        )

        await bot.send_message(
            chat_id=chat_id,
            text=f"–í–æ–ø—Ä–æ—Å {current_index + 1}/{len(questions)}\n\n{current_question['text']}",
            reply_markup=builder.as_markup()
        )
    else:
        score = data["score"]
        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_TASK_COMPLETED.format(score=score, total=len(questions))
        )
        await state.clear()


@router.callback_query(F.data.startswith(("true_", "false_")))
async def handle_truefalse_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data["current_index"]
    questions = data["questions"]

    # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    user_answer, question_idx = callback.data.split("_")
    question_idx = int(question_idx)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—á–∞—é—Ç –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    if question_idx != current_index:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É!", show_alert=True)
        return

    current_question = questions[current_index]
    is_correct = (user_answer == "true") == current_question["is_correct"]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
    new_score = data["score"] + int(is_correct)
    new_index = current_index + 1

    await state.update_data(
        current_index=new_index,
        score=new_score
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º feedback
    feedback = "‚úÖ –í–µ—Ä–Ω–æ!" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"
    correct_answer = TEXT_TRUE if current_question["is_correct"] else TEXT_FALSE
    await callback.message.edit_text(
        f"{callback.message.text}\n\n{feedback}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_next_truefalse_question(callback.bot, callback.message.chat.id, state)
    await callback.answer()