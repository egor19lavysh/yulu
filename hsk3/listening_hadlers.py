import random

from aiogram import Bot, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, InlineKeyboardButton, PollAnswer
from aiogram.utils.keyboard import InlineKeyboardBuilder
from hsk3.intro import Sections, get_back_to_types
from hsk3.services import listening_service
from hsk3.states import ListeningFirstStates, ListeningThirdStates

router = Router()

# –¢–µ–∫—Å—Ç—ã
TEXT_CHOOSE_VARIANT = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:"
TEXT_PART_1 = "–ß–∞—Å—Ç—å 1"
TEXT_PART_2 = "–ß–∞—Å—Ç—å 2"
TEXT_PART_3 = "–ß–∞—Å—Ç—å 3"
TEXT_TASK_COMPLETED = "–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!üéâ\n–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{score}/{total}</b>"
TEXT_CONTINUE_TO_NEXT_PART = "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏"
TEXT_ALL_PARTS_COMPLETED = "–í—Å–µ —á–∞—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ"

# Callback –∑–Ω–∞—á–µ–Ω–∏—è
CALLBACK_HSK3_LISTENING = "hsk3_listening"
CALLBACK_LISTENING_VARIANT = "listening_variant"
CALLBACK_LISTENING_PART_1 = "listening_part_1"
CALLBACK_LISTENING_PART_2 = "listening_part_2"
CALLBACK_LISTENING_PART_3 = "listening_part_3"
CALLBACK_CONTINUE_PART = "continue_part"

# –¢–µ–∫—Å—Ç—ã –∑–∞–¥–∞–Ω–∏–π
FIRST_TASK_TEXT = "<b>–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ä–µ–ø–ª–∏–∫–∞–º–∏:</b>"
PICTURES_CHOICE = "<b>–í–∞—Ä–∏–∞–Ω—Ç—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫</b>"
SECOND_TASK_TEXT = "<b>–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ, –≤–µ—Ä–Ω—ã –ª–∏ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</b>"
THIRD_TASK_TEXT = "<b>–ü—Ä–æ—Å–ª—É—à–∞–π—Ç–µ —Ä–µ–ø–ª–∏–∫–∏ –∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –≤—ã–±—Ä–∞–≤ –æ–¥–∏–Ω –∏–∑ —Ç—Ä–µ—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b>"
TEXT_TRUE = "–ü—Ä–∞–≤–¥–∞"
TEXT_FALSE = "–õ–æ–∂—å"


@router.callback_query(F.data == Sections.listening)
async def show_listening_variants(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã listening –∑–∞–¥–∞–Ω–∏–π"""
    variants = listening_service.get_listening_variants()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã

    if not variants:
        await callback.message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–¥–∞–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for variant in variants:
        builder.add(
            InlineKeyboardButton(
                text=f"–í–∞—Ä–∏–∞–Ω—Ç {variant.id}",
                callback_data=f"{CALLBACK_LISTENING_VARIANT}_{variant.id}"
            )
        )
    builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    await callback.message.answer(TEXT_CHOOSE_VARIANT, reply_markup=builder.as_markup())
    await callback.message.delete()
    await callback.answer()


async def start_part_1(callback: CallbackQuery, state: FSMContext, variant_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å - FirstTask"""
    first_tasks = listening_service.get_first_tasks_by_variant(variant_id)

    if not first_tasks:
        await callback.message.answer("–ó–∞–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É (–∏–ª–∏ –º–æ–∂–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–æ)
    task = first_tasks[0]

    await callback.message.answer(text=FIRST_TASK_TEXT)
    await callback.bot.send_photo(
        chat_id=callback.message.chat.id,
        photo=task.picture_id,
        caption=PICTURES_CHOICE
    )

    await state.update_data(
        current_index=0,
        questions=task.questions,
        part_score=0,
        options=[q.correct_letter for q in task.questions]
    )

    await send_next_first_question(callback.bot, callback.message.chat.id, state)
    await callback.answer()


@router.callback_query(F.data.startswith(CALLBACK_LISTENING_VARIANT))
async def start_listening_variant(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞"""
    variant_id = int(callback.data.split("_")[-1])
    variant = listening_service.get_listening_variant(variant_id)

    if not variant:
        await callback.message.answer("–í–∞—Ä–∏–∞–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        variant_id=variant_id,
        current_part=1,
        total_score=0,
        part_1_completed=False,
        part_2_completed=False,
        part_3_completed=False
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –ø–æ file_id (–Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º)
    try:
        await callback.bot.send_audio(
            chat_id=callback.message.chat.id,
            audio=variant.audio_id
        )
    except Exception as e:
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
    await callback.message.answer(TEXT_PART_1)
    await start_part_1(callback, state, variant_id)

async def send_next_first_question(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()
    current_index = data["current_index"]
    questions = data["questions"]
    options = data["options"]

    if current_index < len(questions):
        sorted_options = sorted(options)
        next_question = questions[current_index]
        correct_answer = next_question.correct_letter
        correct_option_id = sorted_options.index(correct_answer)

        await bot.send_poll(
            chat_id=chat_id,
            question=f"–í–æ–ø—Ä–æ—Å {current_index + 1}",
            options=sorted_options,
            type="quiz",
            correct_option_id=correct_option_id,
            is_anonymous=False
        )

        await state.set_state(ListeningFirstStates.answer)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å
        part_score = data["part_score"]
        total_score = data["total_score"] + part_score

        await state.update_data(
            part_1_completed=True,
            total_score=total_score
        )

        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_TASK_COMPLETED.format(score=part_score, total=len(questions))
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text=TEXT_CONTINUE_TO_NEXT_PART,
                callback_data=CALLBACK_LISTENING_PART_2
            )
        )

        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_PART_2,
            reply_markup=builder.as_markup()
        )


@router.poll_answer(ListeningFirstStates.answer)
async def handle_first_poll_answer(poll_answer: PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()
    current_index = data["current_index"]
    questions = data["questions"]
    options = data["options"]

    current_question = questions[current_index]
    sorted_options = sorted(options)
    correct_option_id = sorted_options.index(current_question.correct_letter)
    is_correct = poll_answer.option_ids[0] == correct_option_id

    await state.update_data(
        current_index=current_index + 1,
        part_score=data["part_score"] + int(is_correct)
    )

    await send_next_first_question(poll_answer.bot, poll_answer.user.id, state)


@router.callback_query(F.data == CALLBACK_LISTENING_PART_2)
async def start_part_2(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å - SecondTask"""
    data = await state.get_data()
    variant_id = data["variant_id"]

    second_tasks = listening_service.get_second_tasks_by_variant(variant_id)

    if not second_tasks:
        await callback.message.answer("–ó–∞–¥–∞–Ω–∏—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    await callback.message.answer(text=SECOND_TASK_TEXT)

    await state.update_data(
        current_index=0,
        questions=[{"text": task.text, "is_correct": task.is_correct} for task in second_tasks],
        part_score=0
    )

    await send_next_second_question(callback.bot, callback.message.chat.id, state)
    await callback.answer()


async def send_next_second_question(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()
    current_index = data["current_index"]
    questions = data["questions"]

    if current_index < len(questions):
        current_question = questions[current_index]

        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text=TEXT_TRUE,
                callback_data=f"true_{current_index}"
            ),
            InlineKeyboardButton(
                text=TEXT_FALSE,
                callback_data=f"false_{current_index}"
            )
        )

        await bot.send_message(
            chat_id=chat_id,
            text=f"–í–æ–ø—Ä–æ—Å {current_index + 1}/{len(questions)}\n\n{current_question['text']}",
            reply_markup=builder.as_markup()
        )
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å
        part_score = data["part_score"]
        total_score = data["total_score"] + part_score

        await state.update_data(
            part_2_completed=True,
            total_score=total_score
        )

        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_TASK_COMPLETED.format(score=part_score, total=len(questions))
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(
                text=TEXT_CONTINUE_TO_NEXT_PART,
                callback_data=CALLBACK_LISTENING_PART_3
            )
        )

        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_PART_3,
            reply_markup=builder.as_markup()
        )


@router.callback_query(F.data.startswith(("true_", "false_")))
async def handle_second_answer(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()
    current_index = data["current_index"]
    questions = data["questions"]

    user_answer, question_idx = callback.data.split("_")
    question_idx = int(question_idx)

    if question_idx != current_index:
        await callback.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ –ø–æ –ø–æ—Ä—è–¥–∫—É!", show_alert=True)
        return

    current_question = questions[current_index]
    is_correct = (user_answer == "true") == current_question["is_correct"]

    new_score = data["part_score"] + int(is_correct)
    new_index = current_index + 1

    await state.update_data(
        current_index=new_index,
        part_score=new_score
    )

    feedback = "‚úÖ –í–µ—Ä–Ω–æ!" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!"
    correct_answer = TEXT_TRUE if current_question["is_correct"] else TEXT_FALSE
    await callback.message.edit_text(
        f"{callback.message.text}\n\n{feedback}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}"
    )

    await send_next_second_question(callback.bot, callback.message.chat.id, state)
    await callback.answer()


@router.callback_query(F.data == CALLBACK_LISTENING_PART_3)
async def start_part_3(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å - ThirdTask"""
    data = await state.get_data()
    variant_id = data["variant_id"]

    third_tasks = listening_service.get_third_tasks_by_variant(variant_id)

    if not third_tasks:
        await callback.message.answer("–ó–∞–¥–∞–Ω–∏—è —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    tasks_data = []
    for task in third_tasks:
        options = {opt.letter: opt.text for opt in task.options}
        tasks_data.append({
            'task_id': task.id,
            'correct_letter': task.correct_letter,
            'options': options
        })

    await callback.message.answer(text=THIRD_TASK_TEXT)

    await state.update_data(
        current_index=0,
        tasks=tasks_data,
        part_score=0,
        total_questions=len(tasks_data)
    )

    await send_next_third_question(callback.bot, callback.message.chat.id, state)
    await callback.answer()


async def send_next_third_question(bot: Bot, chat_id: int, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()
    current_index = data["current_index"]
    tasks = data["tasks"]
    total_questions = data["total_questions"]

    if current_index < total_questions:
        current_task = tasks[current_index]

        options_list = [f"{letter}. {text}"
                        for letter, text in current_task['options'].items()]
        sorted_options = sorted(options_list)

        correct_option_text = f"{current_task['correct_letter']}. {current_task['options'][current_task['correct_letter']]}"
        correct_option_id = sorted_options.index(correct_option_text)

        await bot.send_poll(
            chat_id=chat_id,
            question=f"–í–æ–ø—Ä–æ—Å {current_index + 1} –∏–∑ {total_questions}",
            options=sorted_options,
            type="quiz",
            correct_option_id=correct_option_id,
            is_anonymous=False
        )

        await state.update_data(correct_option_id=correct_option_id)
        await state.set_state(ListeningThirdStates.answer)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–µ—Ç—å—é —á–∞—Å—Ç—å –∏ –≤–µ—Å—å —Ç–µ—Å—Ç
        part_score = data["part_score"]
        total_score = data["total_score"] + part_score

        await bot.send_message(
            chat_id=chat_id,
            text=TEXT_TASK_COMPLETED.format(score=part_score, total=total_questions)
        )

        await bot.send_message(
            chat_id=chat_id,
            text=f"{TEXT_ALL_PARTS_COMPLETED}\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <b>{total_score}</b>"
        )

        await state.clear()
        await get_back_to_types(bot, chat_id, Sections.listening)


@router.poll_answer(ListeningThirdStates.answer)
async def handle_third_poll_answer(poll_answer: PollAnswer, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏"""
    data = await state.get_data()

    is_correct = poll_answer.option_ids[0] == data["correct_option_id"]

    await state.update_data(
        current_index=data["current_index"] + 1,
        part_score=data["part_score"] + int(is_correct)
    )

    await send_next_third_question(poll_answer.bot, poll_answer.user.id, state)